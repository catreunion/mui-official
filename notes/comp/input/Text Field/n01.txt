TextField
- variants: outlined (default), filled, and standard

Form props
Standard form attributes are supported e.g. required, disabled, type, etc. as well as a helperText which is used to give context about a field's input, such as how the input will be used.

Validation
The error prop toggles the error state. The helperText prop can then be used to provide feedback to the user about the error.

Multiline
The multiline prop transforms the text field into a <textarea> element. Unless the rows prop is set, the height of the text field dynamically matches its content (using TextareaAutosize). You can use the minRows and maxRows props to bound it.

Select
The select prop makes the text field use the Select component internally.

Icons
There are multiple ways to display an icon with a text field.

Input Adornments
The main way is with an InputAdornment. This can be used to add a prefix, a suffix, or an action to an input. For instance, you can use an icon button to hide or reveal the password.

Sizes
Fancy smaller inputs? Use the size prop.

The filled variant input height can be further reduced by rendering the label outside of it.

Margin
The margin prop can be used to alter the vertical spacing of the text field. Using none (default) doesn't apply margins to the FormControl whereas dense and normal do.

Full width
fullWidth can be used to make the input take up the full width of its container.


Components
TextField is composed of smaller components ( FormControl, Input, FilledInput, InputLabel, OutlinedInput, and FormHelperText ) that you can leverage directly to significantly customize your form inputs.

You might also have noticed that some native HTML input properties are missing from the TextField component. This is on purpose. The component takes care of the most used properties. Then, it's up to the user to use the underlying component shown in the following demo. Still, you can use inputProps (and InputProps, InputLabelProps properties) if you want to avoid some boilerplate.

Color
The color prop changes the highlight color of the text field when focused.


Outlined secondary

Filled success

Standard warning


Customization
Here are some examples of customizing the component. You can learn more about this in the overrides documentation page.


Bootstrap

Reddit

Custom CSS

CSS validation styleâ€‰*

Customization does not stop at CSS. You can use composition to build custom components and give your app a unique feel. Below is an example using the InputBase component, inspired by Google Maps.


export default function CustomizedInputBase() {
  return (

  );
}
Squarespace - Squarespace has website templates, designer fonts, and color palettes to fit your personal style.
ad by Carbon
ðŸŽ¨ If you are looking for inspiration, you can check MUI Treasury's customization examples.

useFormControl
For advanced customization use cases, a useFormControl() hook is exposed. This hook returns the context value of the parent FormControl component.

API

import { useFormControl } from '@mui/material/FormControl';
Returns

value (object):

value.adornedStart (bool): Indicate whether the child Input or Select component has a start adornment.
value.setAdornedStart (func): Setter function for adornedStart state value.
value.color (string): The theme color is being used, inherited from FormControl color prop .
value.disabled (bool): Indicate whether the component is being displayed in a disabled state, inherited from FormControl disabled prop.
value.error (bool): Indicate whether the component is being displayed in an error state, inherited from FormControl error prop
value.filled (bool): Indicate whether input is filled
value.focused (bool): Indicate whether the component and its children are being displayed in a focused state
value.fullWidth (bool): Indicate whether the component is taking up the full width of its container, inherited from FormControl fullWidth prop
value.hiddenLabel (bool): Indicate whether the label is being hidden, inherited from FormControl hiddenLabel prop
value.required (bool): Indicate whether the label is indicating that the input is required input, inherited from the FormControl required prop
value.size (string): The size of the component, inherited from the FormControl size prop
value.variant (string): The variant is being used by the FormControl component and its children, inherited from FormControl variant prop
value.onBlur (func): Should be called when the input is blurred
value.onFocus (func): Should be called when the input is focused
value.onEmpty (func): Should be called when the input is emptied
value.onFilled (func): Should be called when the input is filled
Example


â€‹
Helper text



import * as React from 'react';
import FormControl, { useFormControl } from '@mui/material/FormControl';
import OutlinedInput from '@mui/material/OutlinedInput';
import Box from '@mui/material/Box';
import FormHelperText from '@mui/material/FormHelperText';

function MyFormHelperText() {
  const { focused } = useFormControl() || {};

  const helperText = React.useMemo(() => {
    if (focused) {
      return 'This field is being focused';
    }

    return 'Helper text';
  }, [focused]);

  return <FormHelperText>{helperText}</FormHelperText>;
}

export default function UseFormControl() {
  return (
    <Box component="form" noValidate autoComplete="off">
      <FormControl sx={{ width: '25ch' }}>
        <OutlinedInput placeholder="Please enter text" />
        <MyFormHelperText />
      </FormControl>
    </Box>
  );
}
Squarespace - Squarespace is everything you need to sell anything.
ad by Carbon
Limitations
Shrink
The input label "shrink" state isn't always correct. The input label is supposed to shrink as soon as the input is displaying something. In some circumstances, we can't determine the "shrink" state (number input, datetime input, Stripe input). You might notice an overlap.

shrink

To workaround the issue, you can force the "shrink" state of the label.

<TextField InputLabelProps={{ shrink: true }} />
or

<InputLabel shrink>Count</InputLabel>
Floating label
The floating label is absolutely positioned. It won't impact the layout of the page. Make sure that the input is larger than the label to display correctly.

type="number"
Inputs of type="number" have potential usability issues:

Allowing certain non-numeric characters ('e', '+', '-', '.') and silently discarding others
The functionality of scrolling to increment/decrement the number can cause accidental and hard-to-notice changes
and more - see this article by the GOV.UK Design System team for a more detailed explanation.

For number validation, one viable alternative is to use the default input type="text" with the pattern attribute, for example:

<TextField inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }} />
In the future, we might provide a number input component.

Helper text
The helper text prop affects the height of the text field. If two text fields are placed side by side, one with a helper text and one without, they will have different heights. For example:


Name

Please enter your name
Name




import * as React from 'react';
import Box from '@mui/material/Box';
import TextField from '@mui/material/TextField';

export default function HelperTextMisaligned() {
  return (
    <Box
      sx={{
        display: 'flex',
        alignItems: 'center',
        '& > :not(style)': { m: 1 },
      }}
    >
      <TextField
        helperText="Please enter your name"
        id="demo-helper-text-misaligned"
        label="Name"
      />
      <TextField id="demo-helper-text-misaligned-no-helper" label="Name" />
    </Box>
  );
}
Squarespace - With Squarespace, you have access to a world of beautiful website templates.
ad by Carbon
This can be fixed by passing a space character to the helperText prop:


Name

Please enter your name
Name

â€‹



import * as React from 'react';
import Box from '@mui/material/Box';
import TextField from '@mui/material/TextField';

export default function HelperTextAligned() {
  return (
    <Box
      sx={{
        display: 'flex',
        alignItems: 'center',
        '& > :not(style)': { m: 1 },
      }}
    >
      <TextField
        helperText="Please enter your name"
        id="demo-helper-text-aligned"
        label="Name"
      />
      <TextField
        helperText=" "
        id="demo-helper-text-aligned-no-helper"
        label="Name"
      />
    </Box>
  );
}
Squarespace - Squarespace has website templates, designer fonts, and color palettes to fit your personal style.
ad by Carbon
Integration with 3rd party input libraries
You can use third-party libraries to format an input. You have to provide a custom implementation of the <input> element with the inputComponent property.

The following demo uses the react-imask and react-number-format libraries. The same concept could be applied to e.g. react-stripe-element.


react-imask

react-number-format




import * as React from 'react';
import PropTypes from 'prop-types';
import { IMaskInput } from 'react-imask';
import NumberFormat from 'react-number-format';
import Box from '@mui/material/Box';
import Input from '@mui/material/Input';
import InputLabel from '@mui/material/InputLabel';
import TextField from '@mui/material/TextField';
import FormControl from '@mui/material/FormControl';

const TextMaskCustom = React.forwardRef(function TextMaskCustom(props, ref) {
  const { onChange, ...other } = props;
  return (
    <IMaskInput
      {...other}
      mask="(#00) 000-0000"
      definitions={{
        '#': /[1-9]/,
      }}
      inputRef={ref}
      onAccept={(value) => onChange({ target: { name: props.name, value } })}
      overwrite
    />
  );
});

TextMaskCustom.propTypes = {
  name: PropTypes.string.isRequired,
  onChange: PropTypes.func.isRequired,
};

const NumberFormatCustom = React.forwardRef(function NumberFormatCustom(props, ref) {
  const { onChange, ...other } = props;

  return (
    <NumberFormat
      {...other}
      getInputRef={ref}
      onValueChange={(values) => {
        onChange({
          target: {
            name: props.name,
            value: values.value,
          },
        });
      }}
      thousandSeparator
      isNumericString
      prefix="$"
    />
  );
});

NumberFormatCustom.propTypes = {
  name: PropTypes.string.isRequired,
  onChange: PropTypes.func.isRequired,
};

export default function FormattedInputs() {
  const [values, setValues] = React.useState({
    textmask: '(100) 000-0000',
    numberformat: '1320',
  });

  const handleChange = (event) => {
    setValues({
      ...values,
      [event.target.name]: event.target.value,
    });
  };

  return (
    <Box
      sx={{
        '& > :not(style)': {
          m: 1,
        },
      }}
    >
      <FormControl variant="standard">
        <InputLabel htmlFor="formatted-text-mask-input">react-imask</InputLabel>
        <Input
          value={values.textmask}
          onChange={handleChange}
          name="textmask"
          id="formatted-text-mask-input"
          inputComponent={TextMaskCustom}
        />
      </FormControl>
      <TextField
        label="react-number-format"
        value={values.numberformat}
        onChange={handleChange}
        name="numberformat"
        id="formatted-numberformat-input"
        InputProps={{
          inputComponent: NumberFormatCustom,
        }}
        variant="standard"
      />
    </Box>
  );
}
Squarespace - Squarespace has website templates, designer fonts, and color palettes to fit your personal style.
ad by Carbon
The provided input component should expose a ref with a value that implements the following interface:

interface InputElement {
  focus(): void;
  value?: string;
}
const MyInputComponent = React.forwardRef((props, ref) => {
  const { component: Component, ...other } = props;

  // implement `InputElement` interface
  React.useImperativeHandle(ref, () => ({
    focus: () => {
      // logic to focus the rendered component from 3rd party belongs here
    },
    // hiding the value e.g. react-stripe-elements
  }));

  // `Component` will be your `SomeThirdPartyComponent` from below
  return <Component {...other} />;
});

// usage
<TextField
  InputProps={{
    inputComponent: MyInputComponent,
    inputProps: {
      component: SomeThirdPartyComponent,
    },
  }}
/>;
Accessibility
In order for the text field to be accessible, the input should be linked to the label and the helper text. The underlying DOM nodes should have this structure:

<div class="form-control">
  <label for="my-input">Email address</label>
  <input id="my-input" aria-describedby="my-helper-text" />
  <span id="my-helper-text">We'll never share your email.</span>
</div>
If you are using the TextField component, you just have to provide a unique id unless you're using the TextField only client side. Until the UI is hydrated TextField without an explicit id will not have associated labels.
If you are composing the component:
<FormControl>
  <InputLabel htmlFor="my-input">Email address</InputLabel>
  <Input id="my-input" aria-describedby="my-helper-text" />
  <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
</FormControl>
Complementary projects
For more advanced use cases, you might be able to take advantage of:

react-hook-form: React hook for form validation.
formik-material-ui: Bindings for using MUI with formik.
redux-form-material-ui: Bindings for using MUI with Redux Form.
mui-rff: Bindings for using MUI with React Final Form.
Unstyled
For advanced customization scenarios, you can use the unstyled primitives.

The basic building blocks are the InputUnstyled component and the useInput hook.

Unstyled component
The InputUnstyled component wraps the native input or textarea element. You can, optionally, provide a custom component to be rendered instead.






import * as React from 'react';
import InputUnstyled from '@mui/base/InputUnstyled';
import { styled } from '@mui/system';

const blue = {
  200: '#80BFFF',
  400: '#3399FF',
};

const grey = {
  50: '#F3F6F9',
  100: '#E7EBF0',
  200: '#E0E3E7',
  300: '#CDD2D7',
  400: '#B2BAC2',
  500: '#A0AAB4',
  600: '#6F7E8C',
  700: '#3E5060',
  800: '#2D3843',
  900: '#1A2027',
};

const StyledInputElement = styled('input')(
  ({ theme }) => `
  width: 320px;
  font-size: 0.875rem;
  font-family: IBM Plex Sans, sans-serif;
  font-weight: 400;
  line-height: 1.5;
  color: ${theme.palette.mode === 'dark' ? grey[300] : grey[900]};
  background: ${theme.palette.mode === 'dark' ? grey[900] : grey[50]};
  border: 1px solid ${theme.palette.mode === 'dark' ? grey[800] : grey[300]};
  border-radius: 8px;
  padding: 12px 12px;
  transition: all 150ms ease;

  &:hover {
    background: ${theme.palette.mode === 'dark' ? null : grey[100]};
    border-color: ${theme.palette.mode === 'dark' ? grey[600] : grey[400]};
  }

  &:focus {
    outline: 2px solid ${theme.palette.mode === 'dark' ? blue[400] : blue[200]};
  }
`,
);

const CustomInput = React.forwardRef(function CustomInput(props, ref) {
  return (
    <InputUnstyled components={{ Input: StyledInputElement }} {...props} ref={ref} />
  );
});

export default function UnstyledInput() {
  return <CustomInput aria-label="Demo input" placeholder="Type something..." />;
}
Squarespace - Squarespace has website templates, designer fonts, and color palettes to fit your personal style.
ad by Carbon
Hook
The useInput hook is the headless version of the InputUnstyled component. Use it for even greater control over the rendered output.






import * as React from 'react';
import { useInput } from '@mui/base';
import { styled } from '@mui/system';

const blue = {
  200: '#80BFFF',
  400: '#3399FF',
};

const grey = {
  50: '#F3F6F9',
  100: '#E7EBF0',
  200: '#E0E3E7',
  300: '#CDD2D7',
  400: '#B2BAC2',
  500: '#A0AAB4',
  600: '#6F7E8C',
  700: '#3E5060',
  800: '#2D3843',
  900: '#1A2027',
};

const StyledInputElement = styled('input')(
  ({ theme }) => `
  width: 320px;
  font-size: 0.875rem;
  font-family: IBM Plex Sans, sans-serif;
  font-weight: 400;
  line-height: 1.5;
  color: ${theme.palette.mode === 'dark' ? grey[300] : grey[900]};
  background: ${theme.palette.mode === 'dark' ? grey[900] : grey[50]};
  border: 1px solid ${theme.palette.mode === 'dark' ? grey[800] : grey[300]};
  border-radius: 8px;
  padding: 12px 12px;
  transition: all 150ms ease;

  &:hover {
    background: ${theme.palette.mode === 'dark' ? null : grey[100]};
    border-color: ${theme.palette.mode === 'dark' ? grey[600] : grey[400]};
  }

  &:focus {
    outline: 2px solid ${theme.palette.mode === 'dark' ? blue[400] : blue[200]};
  }
`,
);

const CustomInput = React.forwardRef(function CustomInput(props, ref) {
  const { getRootProps, getInputProps } = useInput(props, ref);

  return (
    <div {...getRootProps()}>
      <StyledInputElement {...props} {...getInputProps()} />
    </div>
  );
});

export default function UseInput() {
  return <CustomInput aria-label="Demo input" placeholder="Type something..." />;
}
Squarespace - With Squarespace, you have access to a world of beautiful website templates.
ad by Carbon
API
<FilledInput />
<FormControl />
<FormControlUnstyled />
<FormHelperText />
<Input />
<InputAdornment />
<InputBase />
<InputLabel />
<InputUnstyled />
<OutlinedInput />
<TextField />
Switch
Was this page helpful?

Transfer List
CONTENTS

Basic TextField
Form props
Validation
Multiline
Select
Icons
Input Adornments
Sizes
Margin
Full width
Uncontrolled vs. Controlled
Components
Inputs
Color
Customization
useFormControl
Limitations
Shrink
Floating label
type="number"
Helper text
Integration with 3rd party input libraries
Accessibility
Complementary projects
Unstyled
Unstyled component
Hook
API
styled() - MUI