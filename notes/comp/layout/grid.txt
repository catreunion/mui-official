Grid
responsive layout 
grid adapts to screen size and orientation
ensuring visual consistency across layouts
across a wide variety of designs
12-column grid layout
Item widths are set in percentages, so they're always fluid and sized relative to their parent element.
five grid breakpoints: xs, sm, md, lg, and xl
when the viewport width satisfies the breakpoint contraints
Column widths are integer values between 1 and 12
xs={12} sizes a component to occupy the whole viewport width regardless of its size
the component fills all 12 available columns
sm viewport width is 600

Spacing
To control space between children, use the spacing prop. The spacing value can be any positive number, including decimals and any string. The prop is converted into a CSS property using the theme.spacing() helper.

Responsive values
You can switch the props' value based on the active breakpoint. For instance, we can implement the "recommended" responsive layout grid of Material Design.

columns
columnSpacing
direction
rowSpacing
spacing
all the other props of the system
⚠️ When using a responsive columns prop, each grid item needs its corresponding breakpoint. For instance, this is not working. The grid item misses the value for md:

<Grid container columns={{ xs: 4, md: 12 }}>
  <Grid item xs={2} />
</Grid>
Interactive
Below is an interactive demo that lets you explore the visual results of the different settings:



Variable width content
Set one of the size breakpoint props to "auto" instead of true / a number to size a column based on the natural width of its content.

Nested Grid
The container and item props are two independent booleans; they can be combined to allow a Grid component to be both a flex container and child.

A flex container is the box generated by an element with a computed display of flex or inline-flex. In-flow children of a flex container are called flex items and are laid out using the flex layout model.

https://www.w3.org/TR/css-flexbox-1/#box-model


⚠️ Defining an explicit width to a Grid element that is flex container, flex item, and has spacing at the same time lead to unexpected behavior, avoid doing it:

<Grid spacing={1} container item xs={12}>
If you need to do such, remove one of the props.


Limitations
Negative margin
The spacing between items is implemented with a negative margin. This might lead to unexpected behaviors. For instance, to apply a background color, you need to apply display: flex; to the parent.

white-space: nowrap;
The initial setting on flex items is min-width: auto. It's causing a positioning conflict when the children is using white-space: nowrap;. You can experience the issue with:

<Grid item xs>
  <Typography noWrap>

direction: column | column-reverse
The xs, sm, md, lg, and xl props are not supported within direction="column" and direction="column-reverse" containers.

They define the number of grids the component will use for a given breakpoint. They are intended to control width using flex-basis in row containers but they will impact height in column containers. If used, these props may have undesirable effects on the height of the Grid item elements.

CSS Grid Layout
The Grid component is using CSS flexbox internally. But as seen below, you can easily use the system and CSS Grid to layout your pages.



System props
As a CSS utility component, the Grid supports all system properties. You can use them as props directly on the component. For instance, a padding:

<Grid item p={2}>
API
<Grid />
